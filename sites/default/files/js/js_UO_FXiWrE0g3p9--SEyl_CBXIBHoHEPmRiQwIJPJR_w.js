/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($, Drupal, window) {
  function TableResponsive(table) {
    this.table = table;
    this.$table = $(table);
    this.showText = Drupal.t('Show all columns');
    this.hideText = Drupal.t('Hide lower priority columns');
    this.$headers = this.$table.find('th');
    this.$link = $('<button type="button" class="link tableresponsive-toggle"></button>').attr('title', Drupal.t('Show table cells that were hidden to make the table fit within a small screen.')).on('click', $.proxy(this, 'eventhandlerToggleColumns'));
    this.$table.before($('<div class="tableresponsive-toggle-columns"></div>').append(this.$link));
    $(window).on('resize.tableresponsive', $.proxy(this, 'eventhandlerEvaluateColumnVisibility')).trigger('resize.tableresponsive');
  }

  Drupal.behaviors.tableResponsive = {
    attach: function attach(context, settings) {
      once('tableresponsive', 'table.responsive-enabled', context).forEach(function (table) {
        TableResponsive.tables.push(new TableResponsive(table));
      });
    }
  };
  $.extend(TableResponsive, {
    tables: []
  });
  $.extend(TableResponsive.prototype, {
    eventhandlerEvaluateColumnVisibility: function eventhandlerEvaluateColumnVisibility(e) {
      var pegged = parseInt(this.$link.data('pegged'), 10);
      var hiddenLength = this.$headers.filter('.priority-medium:hidden, .priority-low:hidden').length;

      if (hiddenLength > 0) {
        this.$link.show();
        this.$link[0].textContent = this.showText;
      }

      if (!pegged && hiddenLength === 0) {
        this.$link.hide();
        this.$link[0].textContent = this.hideText;
      }
    },
    eventhandlerToggleColumns: function eventhandlerToggleColumns(e) {
      e.preventDefault();
      var self = this;
      var $hiddenHeaders = this.$headers.filter('.priority-medium:hidden, .priority-low:hidden');
      this.$revealedCells = this.$revealedCells || $();

      if ($hiddenHeaders.length > 0) {
        $hiddenHeaders.each(function (index, element) {
          var $header = $(this);
          var position = $header.prevAll('th').length;
          self.$table.find('tbody tr').each(function () {
            var $cells = $(this).find('td').eq(position);
            $cells.show();
            self.$revealedCells = $().add(self.$revealedCells).add($cells);
          });
          $header.show();
          self.$revealedCells = $().add(self.$revealedCells).add($header);
        });
        this.$link[0].textContent = this.hideText;
        this.$link.data('pegged', 1);
      } else {
        this.$revealedCells.hide();
        this.$revealedCells.each(function (index, element) {
          var $cell = $(this);
          var properties = $cell.attr('style').split(';');
          var newProps = [];
          var match = /^display\s*:\s*none$/;

          for (var i = 0; i < properties.length; i++) {
            var prop = properties[i];
            prop.trim();
            var isDisplayNone = match.exec(prop);

            if (isDisplayNone) {
              continue;
            }

            newProps.push(prop);
          }

          $cell.attr('style', newProps.join(';'));
        });
        this.$link[0].textContent = this.showText;
        this.$link.data('pegged', 0);
        $(window).trigger('resize.tableresponsive');
      }
    }
  });
  Drupal.TableResponsive = TableResponsive;
})(jQuery, Drupal, window);;
/**
 * @file
 * Calendar multiple day events behaviors.
 */

(function (Drupal, once) {

  const hashAttribute = 'data-calendar-view-hash';

  /**
   * Alter multiday events theming.
   *
   * This behavior is dependent on preprocess hook.
   *
   * @type {Drupal~behavior}
   *
   * @prop {Drupal~behaviorAttach} attach
   *   Attaches the behavior.
   *
   * @see template_preprocess_calendar_view_day()
   */
  Drupal.behaviors.calendarViewMultiday = {
    attach(context, settings) {
      // Find first instance multiday event from the past.
      let firstInstances =  {};
      context.querySelectorAll('[' + hashAttribute + ']').forEach(function (el) {
        if (el.hasAttribute(hashAttribute)) {
          let hash = el.getAttribute(hashAttribute);
          if (!firstInstances[hash]) {
            firstInstances[hash] = el;
          }
        }
      });

      if (!firstInstances || firstInstances.length < 1) {
        return;
      }

      // Alter all other instances of a multiday event.
      once('calendar-view-multiday', Object.values(firstInstances), context).forEach(function (el) {
        if (!el.hasAttribute(hashAttribute)) {
          return;
        }

        let rowHash = el.getAttribute(hashAttribute);
        let rowInstances = context.querySelectorAll('[' + hashAttribute + '="' + rowHash + '"]');
        if (!rowInstances || rowInstances.length < 1) {
          return;
        }

        // Simulate first instance for multiday spanning in the past.
        if (el.classList.contains('is-multi--middle')) {
          el.classList.add('is-multi--first');
        }

        // Get reference "sizes".
        let elBound = el.getBoundingClientRect();

        // Loop on cloned events.
        rowInstances.forEach(function (instance) {
          // Hover all at once.
          instance.addEventListener('mouseover', function (event) {
            rowInstances.forEach(function (other) {
              other.classList.add('hover');
            });
          });
          instance.addEventListener('mouseleave', function (event) {
            rowInstances.forEach(function (other) {
              other.classList.remove('hover');
            });
          });

          // Simulate same size and position in cell.
          if (instance != el) {
            instance.style.height = elBound.height + 'px';

            if (instance.offsetTop < el.offsetTop) {
              instance.style.marginTop = (el.offsetTop - instance.offsetTop) + 'px';
            }
          }
        });
      });
    },
  };
})(Drupal, once);
;
